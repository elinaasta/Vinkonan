# -*- coding: utf-8 -*-
"""Vinkonan

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bUGY2okOkSqNJd1l1iYeYLf0Px-8_94i

# First model with one input
"""

import pandas as pd
import numpy as np
from numpy import dot
from numpy.linalg import norm


def normalize(data):
    '''
    This function will normalize the input data to be between 0 and 1
    
    '''
    min_val = min(data)
    if min_val < 0:
        data = [x + abs(min_val) for x in data]
    max_val = max(data)
    return [x/max_val for x in data]

def ohe(df, enc_col):
    '''
    This function will one hot encode the specified column and add it back
    onto the input dataframe
    '''
    
    ohe_df = pd.get_dummies(df[enc_col])
    ohe_df.reset_index(drop = True, inplace = True)
    return pd.concat([df, ohe_df], axis = 1)



class CBRecommend():
    def __init__(self, df):
        self.df = df
        
    def cosine_sim(self, v1,v2):
        '''
        This function will calculate the cosine similarity between two vectors
        '''

        return dot(v1,v2)/(norm(v1)*norm(v2))


    def recommend(self, wine_id, n_rec):
        """
        df (dataframe): The dataframe
        wine_id (string): Representing the wine id-number
        n_rec (int): amount of recommendations user wants
        """
        
        # calculate similarity of input book_id vector w.r.t all other vectors
        inputVec = self.df.loc[wine_id].values
        self.df['sim']= self.df.apply(lambda x: self.cosine_sim(inputVec, x.values), axis=1)

        # returns top n user specified books
        return self.df.nlargest(columns='sim',n=n_rec)



if __name__ == '__main__':
    # constants
    from google.colab import drive
    drive.mount('/content/drive')
    PATH = '/content/drive/My Drive/Colab Notebooks/vinkonan_data.csv'

    # import data
    df = pd.read_csv(PATH)


    # normalize the alcohol, rating, price, all large unlimited numbers
    df['alcohol_norm'] = normalize(df['alcohol'].values)
    df['rating_norm'] = normalize(df['rating'].values)
    df['price_norm'] = normalize(df['priceISK'].values)

    
    # OHE on grapes, country, aroma1, aroma2, sweetness, strength, all categorized numers
    df = ohe(df = df, enc_col = 'grapes')
    df = ohe(df = df, enc_col = 'country')
    df = ohe(df = df, enc_col = 'aroma1')
    df = ohe(df = df, enc_col = 'aroma2')
    df = ohe(df = df, enc_col = 'sweetness')
    df = ohe(df = df, enc_col = 'strength')
    

    
    # drop redundant columns
    cols = ['alcohol','rating','priceISK', 'name']
    df.drop(columns = cols, inplace = True)
    df.set_index('wine_id', inplace = True)
    
    # run code
    cbr = CBRecommend(df)
    print(cbr.recommend(wine_id = df.index[87-1], n_rec = 200)) #Change the index number so that index[wine_id -1] with the wine_id number of you favorite wine on the list

"""# Second model with three inputs"""

import pandas as pd
import numpy as np
from numpy import dot
from numpy.linalg import norm
from sklearn.metrics.pairwise import cosine_similarity

def normalize(data):
    '''
    This function will normalize the input data to be between 0 and 1
    
    '''
    min_val = min(data)
    if min_val < 0:
        data = [x + abs(min_val) for x in data]
    max_val = max(data)
    return [x/max_val for x in data]

def ohe(df, enc_col):
    '''
    This function will one hot encode the specified column and add it back
    onto the input dataframe

    '''
    
    ohe_df = pd.get_dummies(df[enc_col])
    ohe_df.reset_index(drop = True, inplace = True)
    return pd.concat([df, ohe_df], axis = 1)


class ThreeCBRecommend():
    
    def __init__(self, df):
        self.df = df
        
        
    def get_cosine_similarities(self, wine_ids):
        '''
        This function will calculate the cosine similarity between two vectors
        The first vector is taken in as a average of the three input vectors
        '''
        vectors = [self.df.loc[wine_id] for wine_id in wine_ids]
        avg_vector = sum(vectors) / len(vectors)
        similarities = list(enumerate(cosine_similarity([avg_vector], self.df)[0]))
        similarities = sorted(similarities,key=lambda x:x[1],reverse=True)
        return similarities



    def recommend(self, wine_ids, n_rec):
      '''
      This function makes the recommendation and adds a similarity factor for each recommended wine
      '''
      sim_scores = self.get_cosine_similarities(wine_ids)
      sim_scores = sim_scores[1:n_rec+1]
      wine_indices = [i[0] for i in sim_scores]
      sim_factors = [i[1] for i in sim_scores] # extract similarity factors
      recommended_wines = self.df.iloc[wine_indices]
      recommended_wines['similarity'] = sim_factors # add similarity factors to the recommended wines
      return recommended_wines



if __name__ == '__main__':

    from google.colab import drive
    drive.mount('/content/drive')
    PATH = '/content/drive/My Drive/Colab Notebooks/vinkonan_data.csv'

    # import data
    df = pd.read_csv(PATH)

    #Prepare the data Vinkonan

    # normalize the alcohol, rating, price, all large unlimited numbers
    df['alcohol_norm'] = normalize(df['alcohol'].values)
    df['rating_norm'] = normalize(df['rating'].values)
    df['price_norm'] = normalize(df['priceISK'].values)

    df.fillna(0, inplace=True)
    
    # OHE on grapes, country, aroma1, aroma2, sweetness, strength, all categorized numers
    df = ohe(df = df, enc_col = 'grapes')
    df = ohe(df = df, enc_col = 'country')
    df = ohe(df = df, enc_col = 'aroma1')
    df = ohe(df = df, enc_col = 'aroma2')
    df = ohe(df = df, enc_col = 'sweetness')
    df = ohe(df = df, enc_col = 'strength')

    
    # drop redundant columns
    cols = ['alcohol','rating','priceISK', 'name']
    df.drop(columns = cols, inplace = True)
    df.set_index('wine_id', inplace = True)


cbr = ThreeCBRecommend(df)

#Choose three wines that you like from the dataset for the recommendation
#To match wine_id from dataset, write wine_id-1 as inputs in wine_ids

wine_ids = [153, 50, 58] 
recommended_wines = cbr.recommend(wine_ids, n_rec=5)
print(recommended_wines)